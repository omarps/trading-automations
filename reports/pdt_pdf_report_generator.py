import os
import markdown
import pdfkit
from PyPDF2 import PdfReader, PdfWriter
from reports.report_generator import ReportGenerator
from pdf_strategy.pdf_generator_context import PDFGeneratorContext
from pdf_strategy.generate_pdf_md_strategy import GeneratePDFMdStrategy
from pdf_strategy.generate_pdf_graphs_strategy import GeneratePDFGraphsStrategy
from pdf_strategy.generate_pdf_options_strategy import GeneratePDFOptionsStrategy
from pdf_strategy.generate_pdf_generic_strategy import GeneratePDFGenericStrategy
from utils.constants import *


class PdtPDFReportGenerator(ReportGenerator):
    """
    A class to generate PDT PDF reports, inheriting from ReportGenerator.

    Attributes:
        base_path (str): The base path where the report files are stored.
        date (str): The date for which the report is generated.
        ticker (str): The ticker symbol for the report. Default is 'SPY'.
        strategies (list): A list of strategies to generate different parts of the PDF report.
    """

    def __init__(self, base_path, date, ticker='SPY'):
        """
        Initializes the PDFReportGenerator with the given base path, date, and ticker.

        Args:
            base_path (str): The base path where the report files are stored.
            date (str): The date for which the report is generated.
            ticker (str): The ticker symbol for the report. Default is 'SPY'.
        """
        super().__init__(base_path, date, ticker)
        self.strategies = [
            GeneratePDFMdStrategy(),
            GeneratePDFGraphsStrategy(),
            GeneratePDFGenericStrategy(GAMMAS),
            GeneratePDFOptionsStrategy(),
            GeneratePDFGenericStrategy(SCREENSHOTS),
            GeneratePDFGenericStrategy(OTHERS)
        ]

    def process_report(self):
        """
        Processes the report data by applying each strategy to generate parts of the PDF report.

        This method iterates over the strategies and uses them to generate the PDF content.
        """
        print("Generating PDF file...")

        # TODO: Replace single report page.
        for strategy in self.strategies:
            context = PDFGeneratorContext(strategy)
            context.generate_pdf(self.base_path, self.date, self.ticker)

    def generate_toc_md(self):
        toc_md = "# Table of Contents\n\n"
        for strategy in self.strategies:
            toc_md += f"- [{strategy.section_name}](#{strategy.section_name.lower().replace(' ', '-')})\n"
        return toc_md

    def write_report(self):
        """
        Writes the processed report data to a single merged PDF file.

        This method merges individual PDF files generated by the strategies into a single PDF file.
        """
        file_path = self.full_path()
        pdf_files = self._report_filenames().values()

        # TODO: extract to method

        # # Generate TOC in Markdown format
        # toc_md = self.generate_toc_md()
        #
        # # Convert TOC Markdown to HTML
        # toc_html = markdown.markdown(toc_md)
        #
        # # Convert TOC HTML to PDF
        # toc_pdf_path = os.path.join(file_path, "toc.pdf")
        # pdfkit.from_string(toc_html, toc_pdf_path)

        # Merge the pdf files using PyPDF2 classes
        merged_pdf = PdfWriter()
        page_number = 0
        # toc_page_links = []
        #
        # # Add TOC PDF pages
        # with open(toc_pdf_path, 'rb') as toc_file:
        #     reader = PdfReader(toc_file)
        #     for page in reader.pages:
        #         merged_pdf.add_page(page)
        #         page_number += 1

        # Add other PDF pages and keep track of page numbers for TOC links
        for pdf_file in pdf_files:
            with open(pdf_file, 'rb') as file:
                reader = PdfReader(pdf_file)
                # TODO: Keep track of the number of pages per strategy to regenerate sections
                # num_pages = len(reader.pages)
                # print(f"Number of pages: {num_pages}")
                # toc_page_links.append((page_number, pdf_file))
                page_number += 1
                for page in reader.pages:
                    merged_pdf.add_page(page)

        # # Add links to TOC
        # for i, (page_num, pdf_file) in enumerate(toc_page_links):
        #     strategy = self.strategies[i]
        #     toc_page = merged_pdf.pages[0]  # Assuming TOC is on the first page
        #     toc_page.add_link(100, 700 - i * 20, 200, 20, page_num)

        # Save merged PDF
        summary_filename = f"{self.ticker}_{self.date}_summary.pdf"
        merged_pdf_file_path = os.path.join(file_path, summary_filename)
        with open(merged_pdf_file_path, 'wb') as output_file:
            merged_pdf.write(output_file)
            print(f"{self.ticker} PDF File: {summary_filename}")

        # Cleanup pdf files
        for pdf_file in pdf_files:
            os.remove(pdf_file)
        print(f"Cleaning up PDF files: {len(pdf_files)}")

    # TODO: extract to super class?
    def _report_filenames(self):
        """
        Returns a dictionary of PDF filenames generated by the strategies.
        keys are the section names and values are the PDF filenames.
        """
        file_path = self.full_path()
        pdf_files = dict(
            map(
                lambda strategy: (strategy.section_name, os.path.join(file_path, strategy.summary_filename())),
                self.strategies
            )
        )
        return pdf_files
